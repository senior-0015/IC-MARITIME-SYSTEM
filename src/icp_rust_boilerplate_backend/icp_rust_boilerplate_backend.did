type Error = variant {
  NotVesselAdmin;
  InvalidPayload : record { errors : vec text };
  NotVoyagePrincipal;
  NotFound : record { msg : text };
};
type Result = variant { Ok : Vessel; Err : Error };
type Result_1 = variant { Ok : Voyage; Err : Error };
type Result_2 = variant { Ok; Err : Error };
type Vessel = record {
  id : nat64;
  name : text;
  current_location : text;
  captain : text;
  voyages_ids : vec nat64;
  capacity : nat32;
  last_update : nat64;
  admin_principal : text;
};
type VesselPayload = record {
  name : text;
  current_location : text;
  captain : text;
  capacity : nat32;
};
type Voyage = record {
  id : nat64;
  vessel_data : opt Vessel;
  departure_port : text;
  departure_time : nat64;
  arrival_time : opt nat64;
  destination_port : text;
  vessel_id : nat64;
  admin_principal : text;
};
type VoyagePayload = record {
  departure_port : text;
  departure_time : nat64;
  arrival_time : opt nat64;
  destination_port : text;
  vessel_id : nat64;
};
service : {
  add_vessel : (VesselPayload) -> (Result);
  add_voyage : (VoyagePayload) -> (Result_1);
  delete_vessel : (nat64) -> (Result_2);
  delete_voyage : (nat64) -> (Result_2);
  get_vessel : (nat64) -> (Result) query;
  get_voyage : (nat64) -> (Result_1) query;
  update_vessel : (nat64, VesselPayload) -> (Result_2);
  update_voyage : (nat64, VoyagePayload) -> (Result_2);
}
